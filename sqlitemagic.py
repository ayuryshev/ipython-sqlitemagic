"""
SQLite magics for IPython
=========================

License
-------

ipython-sqlitemagic is licensed under the term of the Simplified
BSD License (BSD 2-clause license), as follows:

Copyright (c) 2012 Takafumi Arakaki
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""


import sqlite3

from IPython.core.magic import Magics, magics_class, line_magic, cell_magic
from IPython.core.magic_arguments import (argument, magic_arguments,
                                          parse_argstring)
import texttable


@magics_class
class SQLiteMagic(Magics):

    @line_magic('sqlite_create')
    def create(self, line):
        """
        Create in-memory SQLite DB with SQLite magic-friendly setup.
        """
        conn = sqlite3.connect(":memory:")
        conn.row_factory = sqlite3.Row
        return conn

    @magic_arguments()
    @argument(
        'conn'
    )
    @cell_magic('sqlite_execute')
    def execute(self, line, cell):
        """
        Run SQL

        Example::

          %%sqlite conn
          SELECT * FROM table

        """
        args = parse_argstring(self.execute, line)
        conn = self.shell.ev(args.conn)
        cursor = conn.cursor()
        self.show_rows(cursor.execute(cell))

    @magic_arguments()
    @argument(
        'cursor'
    )
    @line_magic('sqlite_show')
    def show(self, line):
        """
        Show rows as table.
        """
        args = parse_argstring(self.show, line)
        cursor = self.shell.ev(args.cursor)
        self.show_rows(cursor)

    @staticmethod
    def show_rows(cursor):
        """
        Show rows generated by `cursor`.

        :type cursor: sqlite3.Cursor

        """
        tt = texttable.Texttable()
        try:
            row = next(cursor)
        except StopIteration:
            return
        try:
            tt.header(row.keys())
        except AttributeError:
            pass
        tt.add_row(row)
        tt.add_rows(cursor, header=False)
        print(tt.draw())


def load_ipython_extension(ip):
    """Load the extension in IPython."""
    global _loaded
    if not _loaded:
        ip.register_magics(SQLiteMagic)
        _loaded = True

_loaded = False
